---
- name: Create non root user
  hosts: all
  remote_user: root
  tasks:
  - name: Add the user 'controller'
    ansible.builtin.user:
      name: controller
      shell: /bin/bash
  - name: Create .ssh directory
    file:
      path: /home/controller/.ssh
      state: directory
      owner: controller
      group: controller
  - name: Set authorized keys for user controller
    copy:
      src: /root/.ssh/authorized_keys
      remote_src: true
      dest: /home/controller/.ssh/authorized_keys
      owner: controller
      group: controller

- name: Install controller
  hosts: all
  remote_user: root
  become_user: controller
  become_method: su
  vars:
    controller_root: "/controller"
  tasks:
  - name: Install node repository
    shell: curl -fsSL https://deb.nodesource.com/setup_16.x | bash -
  - name: Update and upgrade apt packages
    apt:
      upgrade: yes
      update_cache: yes
      cache_valid_time: 86400 # One day

  - name: Install package dependencies
    ansible.builtin.package:
      name:
       - nginx
       - curl
       - rsync
       - nodejs
       - jq
       - redis-server
      state: latest

  - name: Start redis
    service: name=redis-server state=started enabled=yes

  - name: Create root for controller
    file:
      path: "{{ controller_root }}"
      state: directory
      owner: controller
      group: controller

  - name: Create restroom dir
    file:
      path: "{{ controller_root }}/restroom"
      state: directory
      owner: controller
      group: controller

  - name: Importing package.json (restroom)
    become: true
    get_url:
      url: "https://raw.githubusercontent.com/dyne/W3C-DID/main/restroom/package.json"
      dest: "{{ controller_root }}/restroom/package.json"

  - name: Importing restroom.mjs
    become: true
    get_url:
      url: "https://raw.githubusercontent.com/dyne/W3C-DID/main/restroom/restroom.mjs"
      dest: "{{ controller_root }}/restroom/restroom.mjs"

  - name: Download init.mjs
    become: true
    get_url:
      url: "https://raw.githubusercontent.com/dyne/W3C-DID/main/init.mjs"
      dest: "{{ controller_root }}/restroom/init.mjs"


  - name: Config restroom in private network
    ansible.builtin.lineinfile:
      path: /etc/hosts
      line: 127.0.0.1 {{ domain_name }}
      owner: root
      group: root
      mode: '0644'

  - name: Create .env
    become: true
    blockinfile:
      path: "{{ controller_root }}/.env"
      create: true
      block: |
        CUSTOM_404_MESSAGE=nothing to see here
        HTTP_PORT=12001
        HTTPS_PORT=443
        ZENCODE_DIR={{ controller_root }}/contracts
        PRIVATE_ZENCODE_DIR={{ controller_root }}/private_contracts
        FILES_DIR={{ controller_root }}
        CHAIN_EXT=chain
        OPENAPI=true
        YML_EXT=yml
        HOST={{ domain_name }}
        RESOLVER_HOST=localhost
        RESOLVER_PORT=12002

  - name: Link .env from outer dirctory
    become: true
    file:
      src: "{{ controller_root }}/.env"
      dest: "{{ controller_root }}/restroom/.env"
      state: link

  - name: Copy contracts (permissions may be wrong)
    become: true
    synchronize:
      src: "../contracts"
      dest: "{{ controller_root }}"
      owner: no
      group: no

  - name: Fix contracts permissions
    file:
      dest: "{{ controller_root }}/contracts"
      owner: controller
      group: controller
      recurse: yes

  - name: Copy private_contracts
    become: true
    synchronize:
      src: "../private_contracts"
      dest: "{{ controller_root }}"
      owner: no
      group: no

  - name: Fix private_contracts permissions
    file:
      dest: "{{ controller_root }}/private_contracts"
      owner: controller
      group: controller
      recurse: yes

  - name: Download pm2 ecosystem
    become: true
    get_url:
      url: "https://raw.githubusercontent.com/dyne/W3C-DID/main/ecosystem.config.js"
      dest: "{{ controller_root }}/ecosystem.config.js"

  - name: Install yarn
    community.general.npm:
      name: yarn
      global: yes
      state: latest

  - name: Install yarn
    community.general.npm:
      name: pm2
      global: yes
      state: latest

  - name: Update packages of restroom
    become: true
    community.general.yarn:
      path: "{{ controller_root }}/restroom"
      state: latest

  - name: Start controller by hand
    blockinfile:
      dest: "/root/start-controller.sh"
      create: true
      block: |
        su - controller -c "cd /{{ controller_root }}; pm2 start ecosystem.config.js; cd -"

  - name: Nginx service
    blockinfile:
      dest: "/etc/nginx/conf.d/controller.conf"
      create: true
      block: |
        server {
          listen 443 ssl;
          root /var/www/html;
          server_name {{ domain_name }};
          include /etc/nginx/mime.types;
          ssl_certificate /etc/letsencrypt/live/{{ domain_name}}/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/{{ domain_name}}/privkey.pem;
          include /etc/letsencrypt/options-ssl-nginx.conf; # Redirect non-https traffic to https
          if ($scheme != "https") {
              return 301 https://$host$request_uri;
          }
          location ~ ^/1.0/identifiers/(.*) {
                proxy_pass http://127.0.0.1:12001/api/did-resolve?data=%7B%22id%22%3A%22$1%22%7D;
          }
          location / {
            proxy_pass http://127.0.0.1:12001;
          }
        }
