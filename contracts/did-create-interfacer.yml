zenchain: 1.0
start: did-create-interfacer-1-checks.zen
blocks:
  did-create-interfacer-1-checks.zen:
    zenContent: >-
      Rule caller restroom-mw

      Scenario 'ethereum': address

      Scenario 'eddsa': verify singatures

      Scenario 'w3c': proof


      Given I have a valid redis connection on 'redis://localhost:6379'


      # timestamp in proof

      Given I fetch the local timestamp and store it into 'created'

      Given I have a 'string' named 'created'


      # controller did-document needed for id in proof

      Given I read from redis the data under the keys containing
      'did:dyne:controller:' and save the output into 'controller_did_document'

      Given I have a 'string dictionary' named 'controller_did_document'


      # elohim did-document needed for signature verification

      Given I read from redis the data under the key 'id' and save the output
      into 'signer_did_document'

      Given I have a 'did_document' named 'didDocument' inside
      'signer_did_document'


      # controller keyring

      Given I am 'Issuer'

      Given I read the content of 'contracts/keyring.json'

      Given I have my 'keyring'


      # all the other stuff

      Given I have a 'string dictionary' named 'proof'

      Given I have a 'string dictionary' named 'did document'

      Given I have a 'eddsa signature'

      Given I have a 'string' named '@context'


      # to be more clear in the following

      When I rename the 'didDocument' to 'signer_did_document'

      # utility

      When I set 'did_check' to 'did' as 'string'

      When I set 'dyne_check' to 'dyne' as 'string'

      When I set 'controller_check' to 'controller' as 'string'

      When I set 'ganache_check' to 'ganache' as 'string'

      When I set 'zenflows_check' to 'zenflows' as 'string'

      When I set 'elohim_check' to 'elohim' as 'string'

      When I set 'signer_check' to 'false' as 'string'

      When I set 'true' to 'true' as 'string'

      When I set ':' to ':' as 'string'


      # verify that signer_did_document's id is:

      # - did:dyne:zenflows

      # - did:dyne:elohim 

      When I pickup from path 'signer_did_document.id'

      When I create the array by splitting 'id' at ':'

      When I create the copy of element '1' in array 'array'

      When I rename the 'copy' to 'did'

      When I create the copy of element '2' in array 'array'

      When I rename the 'copy' to 'dyne'

      When I create the copy of element '3' in array 'array'

      When I rename the 'copy' to 'idspec'


      When I verify 'did' is equal to 'did_check'

      When I verify 'dyne' is equal to 'dyne_check'

      If I verify 'idspec' is equal to 'elohim_check'

      When I remove 'signer_check'

      When I set 'signer_check' to 'true' as 'string'

      EndIf

      If I verify 'idspec' is equal to 'zenflows_check'

      When I remove 'signer_check'

      When I set 'signer_check' to 'true' as 'string'

      EndIf

      When I verify 'signer_check' is equal to 'true'


      When I remove 'id'

      When I remove 'did'

      When I remove 'dyne'

      When I remove 'idspec'

      When I remove 'array'


      # verify that did_document.id is:

      # - did:dyne:

      # but not:

      # - did:dyne:controller reserved for controller

      # - did:dyne:ganache reserved for alsoKnownAs

      # - did:dyne:elohim reserved for master key

      When I pickup from path 'did_document.id'

      When I create the array by splitting 'id' at ':'

      When I create the copy of element '1' in array 'array'

      When I rename the 'copy' to 'did'

      When I create the copy of element '2' in array 'array'

      When I rename the 'copy' to 'dyne'

      When I create the copy of element '3' in array 'array'

      When I rename the 'copy' to 'idspec'


      When I verify 'did' is equal to 'did_check'

      When I verify 'dyne' is equal to 'dyne_check'

      When I verify 'idspec' is not equal to 'controller_check'

      When I verify 'idspec' is not equal to 'ganache_check'

      When I verify 'idspec' is not equal to 'elohim_check'

      When I remove 'id'


      # verify singautres

      When I create the json of 'did document'

      When I create the verificationMethod of 'signer_did_document'

      When I pickup a 'eddsa public key' from path
      'verificationMethod.eddsa_public_key'

      When I verify the 'json' has a eddsa signature in 'eddsa signature' by
      'eddsa public key'

      When I remove 'verificationMethod'


      # copy of created for the AlsoKnowAs

      When I copy 'created' to 'timestamp-create'


      # create proof

      When I create the jws signature of 'did document'

      When I move 'jws' in 'proof'

      When I move 'created' in 'proof'

      # proof's verification method

      When I pickup from path 'controller_did_document.didDocument.id'

      When I rename the 'id' to 'verificationMethod'

      When I set '#ecdh_public_key' to '#ecdh_public_key' as 'string'

      When I append '#ecdh_public_key' to 'verificationMethod'

      When I move 'verificationMethod' in 'proof'

      When I move 'proof' in 'did document'


      # needed for did doc redis key

      When I pickup from path 'did_document.id'


      When I rename 'did document' to 'didDocument'


      # metadata

      When I create the 'string dictionary' named 'didDocumentMetadata'

      When I rename the 'timestamp-create' to 'created'

      When I move 'created' in 'didDocumentMetadata'


      When I create the 'string dictionary' named 'result'

      When I move '@context' in 'result'

      When I move 'didDocument' in 'result'

      When I move 'didDocumentMetadata' in 'result'


      Then print the 'result'

      Then print the 'id'

      Then print the 'keyring'
    keysFile: did-create-interfacer-1-checks.keys
    next: did-create-interfacer-2-boradcast.zen
  did-create-interfacer-2-boradcast.zen:
    zenContent: >-
      Rule caller restroom-mw


      Scenario 'ethereum': store did on blockchain




      Given I have a valid redis connection on 'redis://localhost:6379'


      Given I read into 'ethereum_nonce' and increment the key named by 'nonce'




      Given I have a ethereum endpoint named 'blockchain'




      Given I have a 'ethereum address' named 'storage contract'


      Given I have a 'gas limit'


      Given I have a 'ethereum nonce'


      Given I have a 'gas price'




      Given I have a 'keyring'


      Given I have a 'string dictionary' named 'result'


      Given I have a 'string' named 'id'




      When I pickup from path 'result.didDocument'


      When I create the mpack of 'didDocument'


      When I rename the 'mpack' to 'data'


      When I create the ethereum transaction to 'storage contract'


      When I use the ethereum transaction to store 'data'


      When I create the signed ethereum transaction for chain 'fabt'




      Then print the 'signed ethereum transaction'


      Then print the 'result'


      Then print the 'id'


      Then I ask ethereum to broadcast the 'signed_ethereum_transaction' and
      save the transaction id in 'txid-created'
    keysFile: did-create-interfacer-2-boradcast.keys
    next: did-create-interfacer-3-redis.zen
  did-create-interfacer-3-redis.zen:
    zenContent: |-
      Rule caller restroom-mw

      Given I have a valid redis connection on 'redis://localhost:6379'
      Given I have a 'string' named 'txid-created'
      Given I have a 'string dictionary' named 'result'
      Given I have a 'string' named 'id'

      When I pickup from path 'result.didDocumentMetadata'
      When I remove the 'didDocumentMetadata' from 'result'
      When I move 'txid-created' in 'didDocumentMetadata'
      When I move 'didDocumentMetadata' in 'result'

      Then print the 'id'
      Then print the 'result'

      Then I write 'result' into redis under the key named by 'id'
