zenchain: 1.0
start: did-create-1-extract-eddsa-key.zen
blocks:
  did-create-1-extract-eddsa-key.zen:
    zenContent: >-
      Scenario 'eddsa': verify signature

      Scenario 'w3c': extract verificationMethod


      Given I have a 'string' named 'url' inside 'did document'

      Given I have a 'did document'

      Given I have a 'eddsa signature'

      Given I have a 'eddsa signature' named 'token signature'


      When I create the verificationMethod of 'did document'

      When I pickup a 'eddsa public key' from path
      'verificationMethod.eddsa_public_key'


      Then print the 'did_document'

      Then print 'url' as 'string' in the 'did document'

      Then print the 'eddsa_signature'

      Then print the 'token_signature'

      Then print the 'eddsa_public_key'
    next: did-create-2-extract-token-key.zen
  did-create-2-extract-token-key.zen:
    zenContent: |
      Scenario 'eddsa': public key

      Given I have a 'string dictionary' named 'did document'
      Given I have a 'eddsa public key'
      Given I have a 'eddsa signature'
      Given I have a 'eddsa signature' named 'token signature'

      When I pickup from path 'did_document.id'
      When I set ':' to ':' as 'string'
      When I create the array by splitting 'id' at ':'
      When I create the copy of element '4' in array 'array'
      When I rename the 'copy' to 'token_public_key'

      When I set 'sent' to 'sent:' as 'string'
      When I append 'token_public_key' to 'sent'

      Then print the 'did_document'
      Then print the 'eddsa_signature'
      Then print the 'token_signature'
      Then print the 'eddsa_public_key'
      Then print the 'token_public_key'
      Then print the 'sent'
    next: did-create-3-check-and-save-on-redis.zen
  did-create-3-check-and-save-on-redis.zen:
    zenContent: >-
      Rule caller restroom-mw

      Scenario 'ethereum': address

      Scenario 'eddsa': verify singatures

      Scenario 'w3c': proof


      Given I have a valid redis connection on 'redis://localhost:6379'


      # timestamp in proof

      Given I fetch the local timestamp and store it into 'created'

      Given I have a 'string' named 'created'


      # check if token public key has been sent, if not sent then the restroom
      statement will return 

      # an empty array [] causing the given statement after it to fail

      Given I read from redis the data under the key 'sent' and save the output
      into 'sent_token'

      Given I have a 'string dictionary' named 'sent_token'


      # controller did-document needed for id in proof

      Given I read from redis the data under the keys containing
      'did:dyne:controller:' and save the output into 'controller_did_document'

      Given I have a 'string dictionary' named 'controller_did_document'


      # controller keyring

      Given I am 'Issuer'

      Given I read the content of 'contracts/keyring.json'

      Given I have my 'keyring'


      # all the other stuff

      Given I have a 'string' named 'sent'

      Given I have a 'string dictionary' named 'proof'

      Given I have a 'string dictionary' named 'did document'

      Given I have a 'eddsa public key'

      Given I have a 'eddsa signature'

      Given I have a 'eddsa public key' named 'token public key'

      Given I have a 'eddsa signature' named 'token signature'


      # verify token

      When 'eddsa' is found in 'sent_token'

      # verify singautres

      When I create the json of 'did document'

      When I verify the 'json' has a eddsa signature in 'eddsa signature' by
      'eddsa public key'

      When I verify the 'json' has a eddsa signature in 'token signature' by
      'token public key'


      # copy of created for the AlsoKnowAs

      When I copy 'created' to 'timestamp-create'


      # create proof

      When I create the jws signature of 'did document'

      When I insert 'jws' in 'proof'

      When I insert 'created' in 'proof'

      # proof's verification method

      When I pickup from path 'controller_did_document.id'

      When I rename the 'id' to 'verificationMethod'

      When I set '#key_ecdsa1' to '#key_ecdsa1' as 'string'

      When I append '#key_ecdsa1' to 'verificationMethod'

      When I insert 'verificationMethod' in 'proof'

      When I insert 'proof' in 'did document'


      # needed for did doc redis key

      When I pickup from path 'did_document.id'


      # need for AlsoKnowAs redis key

      When I pickup from path 'did_document.alsoKnownAs'


      Then print the 'did document'

      Then print the 'id'

      Then print the 'alsoKnownAs'

      Then print the 'sent'

      Then print the 'keyring'

      Then print the 'timestamp-create'


      # save did document and remove sent token on redis

      Then I write 'did_document' into redis under the key named by 'id'

      Then I remove the key 'sent' in redis
    keysFile: did-create-3-check-and-save-on-redis.keys
    next: did-create-4-save-on-blockchain.zen
  did-create-4-save-on-blockchain.zen:
    zenContent: >-
      Rule unknown ignore


      Scenario 'ethereum': store did on blockchain




      Given I have a valid redis connection on 'redis://localhost:6379'


      Given I read into 'ethereum_nonce' and increment the key named by 'nonce'




      # controller ethereum address


      Given I am 'Issuer'


      Given I read the content of 'contracts/public_keys.json'


      Given I have my 'ethereum address'


      Given I have the 'keyring'




      Given I have a ethereum endpoint named 'blockchain'




      Given I have a 'ethereum address' named 'storage contract'


      Given I have a 'gas limit'


      Given I have a 'ethereum nonce'


      Given I have a 'gas price'




      Given I have a 'string dictionary' named 'did document'


      Given I have a 'string' named 'id'


      Given I have a 'string' named 'alsoKnownAs'


      Given I have a 'string' named 'timestamp-create'




      # prepare dictionary for AlsoKnowAs


      When I create the 'string dictionary' named 'AlsoKnownAs'


      When I insert 'id' in 'AlsoKnownAs'


      When I insert 'timestamp-create' in 'AlsoKnownAs'




      When I create the mpack of 'did document'


      When I rename the 'mpack' to 'data'


      When I create the ethereum transaction to 'storage contract'


      When I use the ethereum transaction to store 'data'


      When I create the signed ethereum transaction for chain 'fabt'




      Then print the 'signed ethereum transaction'


      Then print the 'AlsoKnownAs'


      Then print the 'alsoKnownAs'


      Then I ask ethereum to broadcast the 'signed_ethereum_transaction' and
      save the transaction id in 'txid-create'
    keysFile: did-create-4-save-on-blockchain.keys
    next: did-create-5-save-alsoknownas-redis.zen
  did-create-5-save-alsoknownas-redis.zen:
    zenContent: |-
      Rule caller restroom-mw

      Given I have a valid redis connection on 'redis://localhost:6379'
      Given I have a 'string' named 'txid-create'
      Given I have a 'string' named 'alsoKnownAs'
      Given I have a 'string dictionary' named 'AlsoKnownAs'

      When I insert 'txid-create' in 'AlsoKnownAs'

      Then print the 'AlsoKnownAs'
      Then print the 'alsoKnownAs'

      Then I write 'AlsoKnownAs' into redis under the key named by 'alsoKnownAs'
