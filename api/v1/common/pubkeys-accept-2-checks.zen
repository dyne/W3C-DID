Rule caller restroom-mw
Scenario 'ecdh': verify signature
Scenario 'eddsa': verify signature
Scenario 'w3c': proof

# http_request.base_url
Given I have a 'string' named 'base_url' inside 'http_request'

# verify git
Given I verify the path 'data/' is a git repository

# request_data should be = {}
Given I read the content of 'request_path' and save the output into 'request_data'
and I have a 'string dictionary' named 'request_data'

# timestamp
Given I fetch the local timestamp and store it into 'accept_timestamp'
and I have a 'integer' named 'accept_timestamp'

# signer did document
Given I read the content of 'signer_path'
Given I have a 'did document' named 'didDocument'
Given I rename 'didDocument' to 'signer_did_document'
Given I have a 'string dictionary' named 'didDocumentMetadata'
Given I rename 'didDocumentMetadata' to 'signer_metadata'

# key
Given I have a 'string dictionary' named 'proof'
and I have a 'string' named '@context'
# data
Given I have a 'did document' named 'request did document'
and I have a 'ecdh signature'
and I have a 'eddsa signature'
and I have a 'integer' named 'timestamp'
and I have a 'string' named 'request_path'
and I have a 'string' named 'signer_id'

# verify contract is used inside the chain
When I verify 'base_url' has suffix 'pubkeys-accept.chain'

# verify request_data={}
When 'didDocument' is not found in 'request_data'

# verify signer is not deactivated
When I set 'false' to 'false' as 'string'
and I verify 'false' is equal to 'deactivated' in 'signer_metadata'

# extract signer pks
When I create the 'ecdh' public key from did document 'signer_did_document'
and I create the 'eddsa' public key from did document 'signer_did_document'

# verify timestamp (6h) + eddsa_signature
When I create the result of 'accept_timestamp' - 'timestamp'
and I set '6_hours' to '21600000' as 'integer'
and number 'result' is less or equal than '6_hours'
When I create the 'string dictionary' named 'signed_by_eddsa'
and I copy the 'request did document' to 'did document' in 'signed_by_eddsa'
and I copy 'timestamp' in 'signed_by_eddsa'
and I create the json of 'signed_by_eddsa'
and I verify the 'json' has a eddsa signature in 'eddsa signature' by 'eddsa public key'
and I remove 'result'
and I remove 'json'

# verify singautres
When I create the json of 'request did document'
and I verify the 'json' has a ecdh signature in 'ecdh signature' by 'ecdh public key'

# create proof
When I create the jws signature using the ecdh signature in 'ecdh signature'
and I move 'jws' in 'proof'
and I copy the 'accept_timestamp' to 'created' in 'proof'

# proof's verification method
When I copy 'signer_id' to 'verificationMethod'
and I append the string '#ecdh_public_key' to 'verificationMethod'
and I move 'verificationMethod' in 'proof'
and I move 'proof' in 'request did document'

# metadata
When I create the 'string dictionary' named 'didDocumentMetadata'
and I copy the 'accept_timestamp' to 'created' in 'didDocumentMetadata'
and I set 'deactivated' to 'false' as 'string'
and I move 'deactivated' in 'didDocumentMetadata' 

# result
When I create the 'string dictionary' named 'result'
and I move '@context' in 'result'
and I move the 'request_did_document' to 'didDocument' in 'result'
and I move 'didDocumentMetadata' in 'result'

# log
When I pickup from path 'result.didDocument.id'
and I write string '' in 'log_msg'
and I append the 'integer' of 'accept_timestamp' to 'log_msg'
and I append the string ';' to 'log_msg'
and I append 'id' to 'log_msg'
and I append the string ';A;' to 'log_msg'
and I append 'signer_id' to 'log_msg'
and I append the string ';' to 'log_msg'
and I append the 'integer' of 'timestamp' to 'log_msg'

# git commit
When I create the 'string dictionary' named 'commit'
and I set 'author' to 'did-controller' as 'string'
and I move 'author' in 'commit'
and I set 'email' to 'did@dyne.org' as 'string'
and I move 'email' in 'commit'
and I set 'message' to 'added by ' as 'string'
and I append 'signer_id' to 'message'
and I move 'message' in 'commit'
and I create the 'string array' named 'files'
and I copy 'request_path' in 'files'
and I move 'files' in 'commit'

Then print the 'result'
and print the 'request_path'
and print the 'log_msg'
and print the 'commit'

Then store 'result' in the file 'request_path'
Then append the string 'log_msg' to the logfile in 'api_dyne_v1.log'
Then make a new commit to the git repository in 'data'